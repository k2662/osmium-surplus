---
Checks: '*,-abseil-*,-altera-*,-cppcoreguidelines-avoid-magic-numbers,-cppcoreguidelines-pro-bounds-array-to-pointer-decay,-cppcoreguidelines-pro-bounds-constant-array-index,-cppcoreguidelines-pro-bounds-pointer-arithmetic,-cppcoreguidelines-pro-type-static-cast-downcast,-cppcoreguidelines-pro-type-vararg,-fuchsia-*,-hicpp-no-array-decay,-hicpp-vararg,-llvmlibc-*,-modernize-use-trailing-return-type,-readability-identifier-length,-readability-implicit-bool-conversion,-readability-magic-numbers'
#
#  For a list of check options, see:
#  https://clang.llvm.org/extra/clang-tidy/checks/list.html
#
#  Disabled checks:
#
#  abseil-*
#    We are not using abseil.
#
#  altera-*
#    Doesn't apply.
#
#  cppcoreguidelines-avoid-magic-numbers
#  readability-magic-numbers
#    Generally good advice, but there are too many places where this is
#    useful, for instance in tests.
#
#  cppcoreguidelines-pro-bounds-array-to-pointer-decay,hicpp-no-array-decay
#    Gives false positives on asserts.
#
#  cppcoreguidelines-pro-bounds-constant-array-index
#    Too restrictive.
#
#  cppcoreguidelines-pro-bounds-pointer-arithmetic
#    Difficult to get by without it...
#
#  cppcoreguidelines-pro-type-static-cast-downcast
#    When you need it, you need it.
#
#  cppcoreguidelines-pro-type-vararg,hicpp-vararg
#    Sometimes library vararg functions are needed.
#
#  fuchsia-*
#    Much too strict.
#
#  llvmlibc-*
#    Not applicable.
#
#  modernize-use-trailing-return-type
#    I am not quite that modern.
#
#  readability-identifier-length
#    Short identifiers are okay in some cases.
#
#  readability-implicit-bool-conversion
#    I don't think this makes the code more readable.
#
#WarningsAsErrors: '*'
CheckOptions:
    - key: cppcoreguidelines-non-private-member-variables-in-classes.IgnoreClassesWithAllMemberVariablesBeingPublic
      value: true
    - key: misc-non-private-member-variables-in-classes.IgnoreClassesWithAllMemberVariablesBeingPublic
      value: true
...
